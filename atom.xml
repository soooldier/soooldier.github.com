<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>烂笔头</title>
  <subtitle>空谈误国，实干兴邦。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.soooldier.com/"/>
  <updated>2017-04-02T09:55:41.000Z</updated>
  <id>http://www.soooldier.com/</id>
  
  <author>
    <name>soooldier</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Anacron理解及探究</title>
    <link href="http://www.soooldier.com/2017/04/01/Anacron%E7%90%86%E8%A7%A3%E5%8F%8A%E6%8E%A2%E7%A9%B6/"/>
    <id>http://www.soooldier.com/2017/04/01/Anacron理解及探究/</id>
    <published>2017-04-01T14:35:00.000Z</published>
    <updated>2017-04-02T09:55:41.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在linux中，有三种用于任务调度的工具 &lt;em&gt;&lt;a href=&quot;https://linux.die.net/man/1/at&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;at&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&quot;https://linux.die.net/man/8/cron&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cron&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&quot;https://linux.die.net/man/8/anacron&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;anacron&lt;/a&gt;&lt;/em&gt; ；在实际开发中，最常见的就是使用 &lt;em&gt;cron&lt;/em&gt; 去调度执行业务的程序。但是对于 &lt;em&gt;at&lt;/em&gt; 和 &lt;em&gt;anacron&lt;/em&gt; 的使用场景却很少涉猎。其中 &lt;em&gt;at&lt;/em&gt; 一般只用来处理“一次”的任务所以它更少会被用到，本文不会说它；而 &lt;em&gt;anacron&lt;/em&gt; 却在某些场景能解决我们的关键问题，现在有这样一个需求：&lt;br&gt;&lt;strong&gt;“每天凌晨统计一下前一天的订单量”&lt;/strong&gt;&lt;br&gt;通常的做法就是写一个计划任务每天凌晨去执行统计脚本&lt;br&gt; 15 * * * * /usr/local/php/bin/php -f your_script_path/order_statistic.php&lt;br&gt;是不是so easy？如果这么想，那么年轻人，你还是too young too simple！试想一下，如果机房在00:10到00:20断电怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;Anacron能做什么&quot;&gt;&lt;a href=&quot;#Anacron能做什么&quot; class=&quot;headerlink&quot; title=&quot;Anacron能做什么&quot;&gt;&lt;/a&gt;Anacron能做什么&lt;/h4&gt;&lt;p&gt;手册上提到，&lt;em&gt;“Anacron以天为单位周期性地执行命令”&lt;/em&gt; 。单从这里看似乎和 &lt;em&gt;cron&lt;/em&gt; 的功能一样，只不过 &lt;em&gt;anacron&lt;/em&gt; 是以天为单位，而 &lt;em&gt;cron&lt;/em&gt; 最小执行的周期是分钟。其实不然，&lt;em&gt;cron&lt;/em&gt; 和 &lt;em&gt;anacron&lt;/em&gt; 是两种完全不相干的任务调度工具（虽然它们可以结合使用）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;cron&lt;/em&gt; 是通过daemon程序 &lt;em&gt;crond&lt;/em&gt; 来运行任务；而 &lt;em&gt;anacron&lt;/em&gt; 则没有任何daemon程序，它所对应的 &lt;em&gt;anacron&lt;/em&gt; 进程运行完毕就退出。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;cron&lt;/em&gt; 在执行任务时不做任何跟时间相关记录；而 &lt;em&gt;anacron&lt;/em&gt; 会记录下任务完成的时间，这样就给本应该执行却没有执行的任务再执行的条件和机会。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;anacron&lt;/em&gt; 本身也可以用 &lt;em&gt;cron&lt;/em&gt; 去调度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，&lt;em&gt;anacron&lt;/em&gt; 可以解决前面提到因为机房断电造成任务无法执行的问题。在实际应用中它和 &lt;em&gt;cron&lt;/em&gt; 相互独立却又互为补充。&lt;/p&gt;
&lt;h4 id=&quot;Anacron如何使用&quot;&gt;&lt;a href=&quot;#Anacron如何使用&quot; class=&quot;headerlink&quot; title=&quot;Anacron如何使用&quot;&gt;&lt;/a&gt;Anacron如何使用&lt;/h4&gt;&lt;p&gt;&lt;em&gt;/etc/anacrontab&lt;/em&gt; 是 &lt;em&gt;anacron&lt;/em&gt; 的配置文件，在配置 &lt;em&gt;anacron&lt;/em&gt; 任务的时候主要注意4个部分的配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;period in days 执行周期；最小1天，也可以3天，5天，一个星期（7天）乃至一个月（月份不能确定有多少天，所以用@monthly代替）。&lt;/li&gt;
&lt;li&gt;delay in minutes 延迟多长时间执行，以分钟为单位。为了避免多个任务在同一时间执行而造成服务器繁忙，所以应该错峰执行。当然真正延迟的时间还要考虑 &lt;em&gt;RANDOM_DELAY&lt;/em&gt; 的配置。&lt;/li&gt;
&lt;li&gt;job-identifier 任务的唯一标识。它用来创建文件记录任务执行的时间，通常创建在 &lt;em&gt;/var/spool/anacron/&lt;/em&gt; 目录中。&lt;/li&gt;
&lt;li&gt;command 真正执行的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;订单统计的例子&quot;&gt;&lt;a href=&quot;#订单统计的例子&quot; class=&quot;headerlink&quot; title=&quot;订单统计的例子&quot;&gt;&lt;/a&gt;订单统计的例子&lt;/h5&gt;&lt;p&gt;对于前面提到的订单量统计的问题，则可以这么配置：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# /etc/anacrontab: configuration file for anacron&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# See anacron(8) and anacrontab(5) for details.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SHELL=/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PATH=/sbin:/bin:/usr/sbin:/usr/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MAILTO=root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# the maximal random delay added to the base delay of the jobs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RANDOM_DELAY=5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# the jobs will be started during the following hours only&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;START_HOURS_RANGE=1-24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#period in days   delay in minutes   job-identifier   command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1       5       cron.daily.order.statistic      /usr/local/php/bin/php -f your_script_path/order_statistic.php&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于 &lt;em&gt;anacron&lt;/em&gt; 本身是一个普通的程序，还需 &lt;em&gt;cron&lt;/em&gt; 去调度执行。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 每个小时去执行anacron&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;01 * * * * /usr/sbin/anacron&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;centos-6-8-中的例子&quot;&gt;&lt;a href=&quot;#centos-6-8-中的例子&quot; class=&quot;headerlink&quot; title=&quot;centos(6.8)中的例子&quot;&gt;&lt;/a&gt;centos(6.8)中的例子&lt;/h5&gt;&lt;p&gt;Linux中有一个日志处理程序 &lt;em&gt;&lt;a href=&quot;https://linux.die.net/man/8/logrotate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;logrotate&lt;/a&gt;&lt;/em&gt;，它每天运行一次来进行各种日志文件的归档压缩。先看几个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;/etc/cron.d/0hourly&lt;/em&gt;：&lt;em&gt;cron&lt;/em&gt; 调度，每小时执行一次&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SHELL=/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PATH=/sbin:/bin:/usr/sbin:/usr/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MAILTO=root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HOME=/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;01 * * * * root run-parts /etc/cron.hourly&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;/etc/cron.hourly/0anacron&lt;/em&gt;：触发执行 &lt;em&gt;anacron&lt;/em&gt;&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Skip excecution unless the date has changed from the previous run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if test -r /var/spool/anacron/cron.daily; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    day=`cat /var/spool/anacron/cron.daily`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [ `date +%Y%m%d` = &amp;quot;$day&amp;quot; ]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exit 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Skip excecution unless AC powered&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if test -x /usr/bin/on_ac_power; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /usr/bin/on_ac_power &amp;amp;&amp;gt; /dev/null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if test $? -eq 1; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exit 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/sbin/anacron -s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;/etc/anacrontab&lt;/em&gt;：执行 &lt;em&gt;/etc/cron.daily&lt;/em&gt; 目录下的任务&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# /etc/anacrontab: configuration file for anacron&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# See anacron(8) and anacrontab(5) for details.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SHELL=/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PATH=/sbin:/bin:/usr/sbin:/usr/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MAILTO=root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# the maximal random delay added to the base delay of the jobs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RANDOM_DELAY=45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# the jobs will be started during the following hours only&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;START_HOURS_RANGE=3-22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#period in days   delay in minutes   job-identifier   command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1       5       cron.daily              nice run-parts /etc/cron.daily&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7       25      cron.weekly             nice run-parts /etc/cron.weekly&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@monthly 45     cron.monthly            nice run-parts /etc/cron.monthly&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;/etc/cron.daily/logrotate&lt;/em&gt;：&lt;em&gt;logrotate&lt;/em&gt; 任务最终被触发&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/sbin/logrotate /etc/logrotate.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXITVALUE=$?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if [ $EXITVALUE != 0 ]; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /usr/bin/logger -t logrotate &amp;quot;ALERT exited abnormally with [$EXITVALUE]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exit 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Anacron是怎做到的&quot;&gt;&lt;a href=&quot;#Anacron是怎做到的&quot; class=&quot;headerlink&quot; title=&quot;Anacron是怎做到的&quot;&gt;&lt;/a&gt;Anacron是怎做到的&lt;/h4&gt;&lt;p&gt;&lt;em&gt;anacron&lt;/em&gt; 能做到任务“不错过”的关键点在于它每执行完一次便记录完成的时间。&lt;em&gt;anacron&lt;/em&gt; 进程执行任务的时候先通过文件里的上次完成时间和其它的配置判断能否执行，如果能执行则创建一个新的进程执行，当前进程退出；如不能执行则直接退出。详细的过程可通过 &lt;em&gt;strace -f /usr/sbin/anacron&lt;/em&gt; 看到。&lt;/p&gt;
&lt;h4 id=&quot;Anacron如何测试&quot;&gt;&lt;a href=&quot;#Anacron如何测试&quot; class=&quot;headerlink&quot; title=&quot;Anacron如何测试&quot;&gt;&lt;/a&gt;Anacron如何测试&lt;/h4&gt;&lt;p&gt;我们在测试 &lt;em&gt;anacron&lt;/em&gt; 的时候通常希望忽略配置文件中延迟执行的时间。可以使用 &lt;em&gt;-n&lt;/em&gt; 参数来实现 &lt;em&gt;/usr/sbin/anacron -n your_job_identifier&lt;/em&gt;，而 &lt;em&gt;-f&lt;/em&gt; 参数则可以忽略对timestamp文件的检测。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在linux中，有三种用于任务调度的工具 &lt;em&gt;&lt;a href=&quot;https://linux.die.net/man/1/at&quot;&gt;at&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&quot;https://linux.die.net/man/8/cron&quot;&gt;cron&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;&lt;a href=&quot;https://linux.die.net/man/8/anacron&quot;&gt;anacron&lt;/a&gt;&lt;/em&gt; ；在实际开发中，最常见的就是使用 &lt;em&gt;cron&lt;/em&gt; 去调度执行业务的程序。但是对于 &lt;em&gt;at&lt;/em&gt; 和 &lt;em&gt;anacron&lt;/em&gt; 的使用场景却很少涉猎。其中 &lt;em&gt;at&lt;/em&gt; 一般只用来处理“一次”的任务所以它更少会被用到，本文不会说它；而 &lt;em&gt;anacron&lt;/em&gt; 却在某些场景能解决我们的关键问题，现在有这样一个需求：&lt;br&gt;&lt;strong&gt;“每天凌晨统计一下前一天的订单量”&lt;/strong&gt;&lt;br&gt;通常的做法就是写一个计划任务每天凌晨去执行统计脚本&lt;br&gt; 15 * * * * /usr/local/php/bin/php -f your_script_path/order_statistic.php&lt;br&gt;是不是so easy？如果这么想，那么年轻人，你还是too young too simple！试想一下，如果机房在00:10到00:20断电怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="系统" scheme="http://www.soooldier.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="linux" scheme="http://www.soooldier.com/tags/linux/"/>
    
      <category term="crontab" scheme="http://www.soooldier.com/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>nginx错误502，503，504分析</title>
    <link href="http://www.soooldier.com/2017/02/10/nginx%E9%94%99%E8%AF%AF502%EF%BC%8C503%EF%BC%8C504%E5%88%86%E6%9E%90/"/>
    <id>http://www.soooldier.com/2017/02/10/nginx错误502，503，504分析/</id>
    <published>2017-02-10T09:28:10.000Z</published>
    <updated>2017-04-01T15:07:09.000Z</updated>
    
    <content type="html">&lt;p&gt;开发过程中我们经常会遇到nginx 502，503，504错误，这些错误代表什么？什么情况下会出现这些错？下面一一说明（均以nignx+php-fpm举例）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_Error&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;上这么解释：&lt;br&gt;&lt;strong&gt;502 Bad Gateway&lt;/strong&gt;&lt;br&gt;      The server was acting as a gateway or proxy and received an invalid response from the upstream server.&lt;br&gt;&lt;strong&gt;503 Service Unavailable&lt;/strong&gt;&lt;br&gt;      The server is currently unavailable (because it is overloaded or down for maintenance). Generally, this is a temporary state.&lt;br&gt;&lt;strong&gt;504 Gateway Time-out&lt;/strong&gt;&lt;br&gt;      The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;502-Bad-Gateway&quot;&gt;&lt;a href=&quot;#502-Bad-Gateway&quot; class=&quot;headerlink&quot; title=&quot;502 Bad Gateway&quot;&gt;&lt;/a&gt;502 Bad Gateway&lt;/h4&gt;&lt;p&gt;fpm进程挂掉或者后端程序过长时间未返回。&lt;br&gt;编写一个简单的php脚本gateway.php进行测试，内容很简单 &lt;em&gt;&amp;lt;?php sleep(10);echo ‘ok;’?&amp;gt;&lt;/em&gt; ，开始下面的测试：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动nginx，不启动fpm，直接 &lt;em&gt;curl &lt;a href=&quot;http://localhost/gateway.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/gateway.php&lt;/a&gt;&lt;/em&gt; ，响应502 bad gateway错误且nginx的error log出现错误&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2017/02/10 19:08:21 [error] 216#216: *84 connect() failed (111: Connection refused) while connecting to upstream, client: 172.17.0.1, server: website80.com, request: &amp;quot;GET /gateway.php HTTP/1.1&amp;quot;, upstream: &amp;quot;fastcgi://127.0.0.1:9000&amp;quot;, host: &amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动fpm，修改php-fpm.conf中request_terminate_timeout的值为5s。继续 &lt;em&gt;curl &lt;a href=&quot;http://localhost/gateway.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/gateway.php&lt;/a&gt;&lt;/em&gt; ，响应502 bad gateway。nginx和php-fpm分别报错&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// nginx error log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2017/02/10 19:10:57 [error] 246#246: *88 recv() failed (104: Connection reset by peer) while reading response header from upstream, client: 172.17.0.1, server: website80.com, request: &amp;quot;GET /gateway.php HTTP/1.1&amp;quot;, upstream: &amp;quot;fastcgi://127.0.0.1:9000&amp;quot;, host: &amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// php-fpm error log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[10-Feb-2017 19:10:57] WARNING: [pool www] child 242, script &amp;apos;/home/website/default/gateway.php&amp;apos; (request: &amp;quot;GET /gateway.php&amp;quot;) execution timed out (6.205572 sec), terminating&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[10-Feb-2017 19:10:57] WARNING: [pool www] child 242 exited on signal 15 (SIGTERM) after 36.692467 seconds from start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;503-Service-Unavailable&quot;&gt;&lt;a href=&quot;#503-Service-Unavailable&quot; class=&quot;headerlink&quot; title=&quot;503 Service Unavailable&quot;&gt;&lt;/a&gt;503 Service Unavailable&lt;/h4&gt;&lt;p&gt;当遇到这个状态码的时候表示服务临时不可用，比如nginx配置了频率限制而client端又超过了配置的限制后就会收到503的响应。&lt;/p&gt;
&lt;h4 id=&quot;504-Gateway-Time-out&quot;&gt;&lt;a href=&quot;#504-Gateway-Time-out&quot; class=&quot;headerlink&quot; title=&quot;504 Gateway Time-out&quot;&gt;&lt;/a&gt;504 Gateway Time-out&lt;/h4&gt;&lt;p&gt;nginx的fastcgi模块有一个fastcgi_read_timeout配置，它表示从FastCGI server获取数据的超时时间。如果超过这个配置客户端就是收到504的响应。还以 &lt;em&gt;gateway.php&lt;/em&gt; 举例（修改fastcgi_read_timeout的值为5s）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// nginx error log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2017/02/12 14:57:26 [error] 138#138: *1113 upstream timed out (110: Connection timed out) while reading response header from upstream, client: 172.17.0.1, server: website80.com, request: &amp;quot;GET /gateway.php HTTP/1.1&amp;quot;, upstream: &amp;quot;fastcgi://127.0.0.1:9000&amp;quot;, host: &amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;开发过程中我们经常会遇到nginx 502，503，504错误，这些错误代表什么？什么情况下会出现这些错？下面一一说明（均以nignx+php-fpm举例）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_Error&quot;&gt;wikipedia&lt;/a&gt;上这么解释：&lt;br&gt;&lt;strong&gt;502 Bad Gateway&lt;/strong&gt;&lt;br&gt;      The server was acting as a gateway or proxy and received an invalid response from the upstream server.&lt;br&gt;&lt;strong&gt;503 Service Unavailable&lt;/strong&gt;&lt;br&gt;      The server is currently unavailable (because it is overloaded or down for maintenance). Generally, this is a temporary state.&lt;br&gt;&lt;strong&gt;504 Gateway Time-out&lt;/strong&gt;&lt;br&gt;      The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="系统" scheme="http://www.soooldier.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="lnmp" scheme="http://www.soooldier.com/tags/lnmp/"/>
    
      <category term="nginx" scheme="http://www.soooldier.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>记一次lnmp环境问题</title>
    <link href="http://www.soooldier.com/2016/09/08/%E8%AE%B0%E4%B8%80%E6%AC%A1lnmp%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/"/>
    <id>http://www.soooldier.com/2016/09/08/记一次lnmp环境问题/</id>
    <published>2016-09-08T12:53:32.000Z</published>
    <updated>2017-04-01T15:05:26.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h4&gt;&lt;p&gt;本打算把公司内部的php升级为5.6.x，op給了一个测试环境。于是便开始了环境搭建并测试的工作，configure，make，make install。正当我使用phpinfo()测试通过天真地以为环境搭建完成的时候，突然发现了一个奇怪的问题：通过fpm访问php的错误日志并未纪录在php.ini指定的日志文件中而却出现在了php-fpm.conf指定的配置文件。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题复现&quot;&gt;&lt;a href=&quot;#问题复现&quot; class=&quot;headerlink&quot; title=&quot;问题复现&quot;&gt;&lt;/a&gt;问题复现&lt;/h4&gt;&lt;p&gt;php.ini中跟错误记录相关的配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;error_reporting = E_ALL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log_errors = On&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error_log = /home/ziroom/runtime/php/var/log/php-errors.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;php-fpm.conf的配置：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;error_log = /home/ziroom/runtime/php/var/log/php-fpm.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log_level = notice&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; Redirect worker stdout and stderr into main error log. If not set, stdout and stderr will be redirected to /dev/null according to FastCGI specs. Note: on highloaded environement, this can cause some delay in the page process time (several ms).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;catch_workers_output = yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意fpm中的catch_workers_output设置，它的作用是把fpm worker进程的stdout和stderr转发到主进程的error log。&lt;strong&gt;一定设置它为yes！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;访问测试脚本test.php，它的内容为&lt;code&gt;echo 2/0;&lt;/code&gt;，php-fpm.log中的日志内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[08-Sep-2016 14:29:41] WARNING: [pool www] child 126 said into stderr: &amp;quot;NOTICE: PHP message: PHP Warning:  Division by zero in /usr/local/nginx/html/index.php on line 2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;问题排查&quot;&gt;&lt;a href=&quot;#问题排查&quot; class=&quot;headerlink&quot; title=&quot;问题排查&quot;&gt;&lt;/a&gt;问题排查&lt;/h4&gt;&lt;p&gt;从上面的日志可以看出pid为126的进程（fpm子进程）向stderr发送了一条级别为NOTICE的错误信息，这条错误信息恰好是php抛出的一个Warning；但是对于真正记录错误日志的fpm主进程来说却又是一个WARNING。&lt;/p&gt;
&lt;p&gt;接下来试着调高fpm的log_level为warning，重新访问test.php。结果并没有记录任何错误日志。这个现象很容易解释，fpm子进程向stderr传递的是一个NOTICE级别的信息，而配置文件中log_level的设置高于NOTICE，因而不会记录日志。&lt;/p&gt;
&lt;p&gt;但是！！！为何php的错误会记录到fpm的日志文件中？请叫老b得知他没有这个问题，那么一定我自己的问题了。几经辗转后超哥提醒我：&lt;strong&gt;看看是不是权限的问题！&lt;/strong&gt; 刚开始其实我是拒绝的，因为按常理来说如果是因为权限问题的话在日志文件里应该会有报错的。苦于没有别的办法就看了下目录权限，卧槽！！！真是有问题，fpm的用户和组都是ziroom，而配置的&lt;code&gt;/home/ziroom/runtime/php/var/log/php-errors.log&lt;/code&gt;对ziroom用户来说却没有写入权限。修改权限后重启fpm，访问test.php，一切正常，错误日志写到了php-errors.log中。&lt;/p&gt;
&lt;h4 id=&quot;追根溯源&quot;&gt;&lt;a href=&quot;#追根溯源&quot; class=&quot;headerlink&quot; title=&quot;追根溯源&quot;&gt;&lt;/a&gt;追根溯源&lt;/h4&gt;&lt;p&gt;问题虽然解决了，但是并未解决掉心里的疑问，打算再追查下去。疑问有2 ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有权限为什么没有报错&lt;/li&gt;
&lt;li&gt;写入php-errors.log没有权限，为何写入php-fpm.log却有权限&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于问题1，root用户启动php-fpm主进程，主进程fork子进程，它的用户被设置成了fpm。于是把fpm的子进程数量改为1，strace该进程看到以下信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker环境直接使用strace会报错（strace: attach: ptrace(PTRACE_ATTACH, …): Operation not permitted）必须打开选项–privileged&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open(&amp;quot;/usr/local/nginx/html/index.php&amp;quot;, O_RDONLY) = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fstat(5, &amp;#123;st_mode=S_IFREG|0644, st_size=16, ...&amp;#125;) = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fstat(5, &amp;#123;st_mode=S_IFREG|0644, st_size=16, ...&amp;#125;) = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fstat(5, &amp;#123;st_mode=S_IFREG|0644, st_size=16, ...&amp;#125;) = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mmap(NULL, 16, PROT_READ, MAP_SHARED, 5, 0) = 0x7f8aa96dd000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;getcwd(&amp;quot;/&amp;quot;, 4095)                       = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chdir(&amp;quot;/usr/local/nginx/html&amp;quot;)          = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setitimer(ITIMER_PROF, &amp;#123;it_interval=&amp;#123;0, 0&amp;#125;, it_value=&amp;#123;30, 0&amp;#125;&amp;#125;, NULL) = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;munmap(0x7f8aa96dd000, 16)              = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;close(5)                                = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open(&amp;quot;/usr/local/php/var/log/php_errors.log&amp;quot;, O_WRONLY|O_CREAT|O_APPEND, 0644) = -1 EACCES (Permission denied)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;write(2, &amp;quot;NOTICE: PHP message: PHP Warning&amp;quot;..., 97) = 97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chdir(&amp;quot;/&amp;quot;)                              = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;times(&amp;#123;tms_utime=0, tms_stime=0, tms_cutime=0, tms_cstime=0&amp;#125;) = 4296910449&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stat(&amp;quot;/etc/localtime&amp;quot;, &amp;#123;st_mode=S_IFREG|0644, st_size=118, ...&amp;#125;) = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;write(4, &amp;quot;127.0.0.1 -  09/Sep/2016:01:59:5&amp;quot;..., 110) = 110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setitimer(ITIMER_PROF, &amp;#123;it_interval=&amp;#123;0, 0&amp;#125;, it_value=&amp;#123;0, 0&amp;#125;&amp;#125;, NULL) = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;write(3, &amp;quot;\1\7\0\1\0Y\7\0PHP message: PHP Warning&amp;quot;..., 200) = 200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shutdown(3, SHUT_WR)                    = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;recvfrom(3, &amp;quot;\1\5\0\1\0\0\0\0&amp;quot;, 8, 0, NULL, NULL) = 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;recvfrom(3, &amp;quot;&amp;quot;, 8, 0, NULL, NULL)       = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;close(3)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到通过strace拿到的信息中出现了&lt;em&gt;Permission denied&lt;/em&gt;关键字，紧接着把”NOTICE: PHP message: PHP Warning”字符串写到了标准错误输出。这就和第一次在php-fpm日志中看到的信息相符了。&lt;/p&gt;
&lt;p&gt;问题2，fpm主进程是以root用户启动的，那么大胆猜测一下php-fpm.log只有fpm主进程才往日志里添加内容。lsof看一下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lsof /usr/local/php/var/log/php-fpm.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ php-fpm 125 root    2w   REG   0,46     1967  607 /usr/local/php/var/log/php-fpm.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ php-fpm 125 root    3w   REG   0,46     1967  607 /usr/local/php/var/log/php-fpm.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;果不其然，只有fpm的主进程（pid为125）才向php-fpm.log文件中写入日志。&lt;/p&gt;
&lt;h4 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h4&gt;&lt;p&gt;至此，忽略内部更详尽细节，已经完全解决了文章开头的疑问。至于fpm为何这么设计，我等菜鸟无法评论。&lt;/p&gt;
&lt;p&gt;最后感谢老b同志亲临现场指导，虽是由一个低级错误引起，但只需要稍微往深一点研究还是挺有意思的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h4&gt;&lt;p&gt;本打算把公司内部的php升级为5.6.x，op給了一个测试环境。于是便开始了环境搭建并测试的工作，configure，make，make install。正当我使用phpinfo()测试通过天真地以为环境搭建完成的时候，突然发现了一个奇怪的问题：通过fpm访问php的错误日志并未纪录在php.ini指定的日志文件中而却出现在了php-fpm.conf指定的配置文件。&lt;/p&gt;
    
    </summary>
    
      <category term="系统" scheme="http://www.soooldier.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="lnmp" scheme="http://www.soooldier.com/tags/lnmp/"/>
    
  </entry>
  
</feed>
